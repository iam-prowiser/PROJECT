{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/admin.ts","../../server/lib/database.ts","../../server/routes/menu-mongo.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst ADMIN_USERNAME = process.env.ADMIN_USERNAME || \"admin\";\nconst ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || \"admin123\";\n\nexport interface AdminLoginRequest {\n  username: string;\n  password: string;\n}\n\nexport interface AdminLoginResponse {\n  success: boolean;\n  token?: string;\n  message?: string;\n}\n\nexport const handleAdminLogin: RequestHandler = (req, res) => {\n  try {\n    const { username, password } = req.body as AdminLoginRequest;\n\n    if (!username || !password) {\n      res.status(400).json({\n        success: false,\n        message: \"Username and password are required\",\n      } as AdminLoginResponse);\n      return;\n    }\n\n    if (username !== ADMIN_USERNAME || password !== ADMIN_PASSWORD) {\n      res.status(401).json({\n        success: false,\n        message: \"Invalid credentials\",\n      } as AdminLoginResponse);\n      return;\n    }\n\n    const token = jwt.sign(\n      { username, role: \"admin\" },\n      JWT_SECRET,\n      { expiresIn: \"24h\" }\n    );\n\n    res.json({\n      success: true,\n      token,\n      message: \"Login successful\",\n    } as AdminLoginResponse);\n  } catch (error) {\n    console.error(\"Admin login error:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    } as AdminLoginResponse);\n  }\n};\n\nexport const verifyAdminToken: RequestHandler = (req, res, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      res.status(401).json({ message: \"No token provided\" });\n      return;\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n\n    if (decoded.role !== \"admin\") {\n      res.status(403).json({ message: \"Access denied\" });\n      return;\n    }\n\n    (req as any).admin = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: \"Invalid token\" });\n  }\n};\n","import { MongoClient, Db, Collection } from \"mongodb\";\n\nlet client: MongoClient | null = null;\nlet db: Db | null = null;\n\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb+srv://rajaadarsh25:B5t1yuwLvjj5GAGM@cluster0.bjggxsd.mongodb.net/\";\nconst DATABASE_NAME = process.env.DATABASE_NAME || \"messbook\";\n\nexport async function connectToDatabase(): Promise<Db> {\n  if (db) {\n    return db;\n  }\n\n  try {\n    client = new MongoClient(MONGODB_URI);\n    await client.connect();\n    db = client.db(DATABASE_NAME);\n    console.log(\"Connected to MongoDB successfully\");\n    return db;\n  } catch (error) {\n    console.error(\"Failed to connect to MongoDB:\", error);\n    throw error;\n  }\n}\n\nexport async function getMenusCollection(): Promise<Collection> {\n  const database = await connectToDatabase();\n  return database.collection(\"menus\");\n}\n\nexport async function closeDatabaseConnection(): Promise<void> {\n  if (client) {\n    await client.close();\n    client = null;\n    db = null;\n    console.log(\"Disconnected from MongoDB\");\n  }\n}\n\n// Graceful shutdown\nprocess.on(\"SIGINT\", async () => {\n  await closeDatabaseConnection();\n  process.exit(0);\n});\n\nprocess.on(\"SIGTERM\", async () => {\n  await closeDatabaseConnection();\n  process.exit(0);\n});\n","import { RequestHandler } from \"express\";\nimport { ObjectId } from \"mongodb\";\nimport { getMenusCollection } from \"../lib/database\";\n\nexport interface MenuEntry {\n  _id?: ObjectId | string;\n  date: string;\n  mealType: \"breakfast\" | \"lunch\" | \"snacks\" | \"dinner\";\n  menu: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport const handleGetMenus: RequestHandler = async (req, res) => {\n  try {\n    const collection = await getMenusCollection();\n    const menus = await collection\n      .find({})\n      .sort({ date: -1, mealType: 1 })\n      .toArray();\n\n    // Convert ObjectId to string for JSON serialization\n    const serializedMenus = menus.map(menu => ({\n      ...menu,\n      _id: menu._id.toString(),\n    }));\n\n    res.json(serializedMenus);\n  } catch (error) {\n    console.error(\"Get menus error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const handleCreateMenu: RequestHandler = async (req, res) => {\n  try {\n    const { date, mealType, menu } = req.body;\n\n    if (!date || !mealType || !menu) {\n      res.status(400).json({ message: \"Date, meal type, and menu are required\" });\n      return;\n    }\n\n    const collection = await getMenusCollection();\n\n    // Check if menu already exists for this date and meal type\n    const existingMenu = await collection.findOne({ date, mealType });\n\n    if (existingMenu) {\n      res.status(409).json({ \n        message: `Menu for ${mealType} on ${date} already exists. Please edit the existing entry.` \n      });\n      return;\n    }\n\n    const newEntry: MenuEntry = {\n      date,\n      mealType,\n      menu,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const result = await collection.insertOne(newEntry);\n    const createdMenu = await collection.findOne({ _id: result.insertedId });\n\n    if (createdMenu) {\n      res.status(201).json({\n        ...createdMenu,\n        _id: createdMenu._id.toString(),\n      });\n    } else {\n      res.status(500).json({ message: \"Failed to create menu entry\" });\n    }\n  } catch (error) {\n    console.error(\"Create menu error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const handleUpdateMenu: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { date, mealType, menu } = req.body;\n\n    if (!date || !mealType || !menu) {\n      res.status(400).json({ message: \"Date, meal type, and menu are required\" });\n      return;\n    }\n\n    if (!ObjectId.isValid(id)) {\n      res.status(400).json({ message: \"Invalid menu ID\" });\n      return;\n    }\n\n    const collection = await getMenusCollection();\n\n    // Check if another menu already exists for this date and meal type (excluding current entry)\n    const existingMenu = await collection.findOne({ \n      _id: { $ne: new ObjectId(id) },\n      date, \n      mealType \n    });\n\n    if (existingMenu) {\n      res.status(409).json({ \n        message: `Another menu for ${mealType} on ${date} already exists.` \n      });\n      return;\n    }\n\n    const result = await collection.updateOne(\n      { _id: new ObjectId(id) },\n      { \n        $set: { \n          date, \n          mealType, \n          menu, \n          updatedAt: new Date() \n        } \n      }\n    );\n\n    if (result.matchedCount === 0) {\n      res.status(404).json({ message: \"Menu entry not found\" });\n      return;\n    }\n\n    const updatedMenu = await collection.findOne({ _id: new ObjectId(id) });\n    \n    if (updatedMenu) {\n      res.json({\n        ...updatedMenu,\n        _id: updatedMenu._id.toString(),\n      });\n    } else {\n      res.status(500).json({ message: \"Failed to retrieve updated menu\" });\n    }\n  } catch (error) {\n    console.error(\"Update menu error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const handleDeleteMenu: RequestHandler = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    if (!ObjectId.isValid(id)) {\n      res.status(400).json({ message: \"Invalid menu ID\" });\n      return;\n    }\n\n    const collection = await getMenusCollection();\n    const result = await collection.deleteOne({ _id: new ObjectId(id) });\n\n    if (result.deletedCount === 0) {\n      res.status(404).json({ message: \"Menu entry not found\" });\n      return;\n    }\n\n    res.json({ message: \"Menu entry deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete menu error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\nexport const handleGetMenuByDate: RequestHandler = async (req, res) => {\n  try {\n    const { date } = req.params;\n    const { mealType } = req.query;\n\n    const collection = await getMenusCollection();\n    const query: any = { date };\n    \n    if (mealType) {\n      query.mealType = mealType;\n    }\n\n    const menus = await collection.find(query).sort({ mealType: 1 }).toArray();\n    \n    // Convert ObjectId to string for JSON serialization\n    const serializedMenus = menus.map(menu => ({\n      ...menu,\n      _id: menu._id.toString(),\n    }));\n\n    res.json(serializedMenus);\n  } catch (error) {\n    console.error(\"Get menu by date error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleAdminLogin, verifyAdminToken } from \"./routes/admin\";\nimport {\n  handleGetMenus,\n  handleCreateMenu,\n  handleUpdateMenu,\n  handleDeleteMenu,\n  handleGetMenuByDate\n} from \"./routes/menu-mongo\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", handleAdminLogin);\n\n  // Menu management routes (protected)\n  app.get(\"/api/admin/menus\", verifyAdminToken, handleGetMenus);\n  app.post(\"/api/admin/menus\", verifyAdminToken, handleCreateMenu);\n  app.put(\"/api/admin/menus/:id\", verifyAdminToken, handleUpdateMenu);\n  app.delete(\"/api/admin/menus/:id\", verifyAdminToken, handleDeleteMenu);\n\n  // Public routes for menu viewing\n  app.get(\"/api/menus/:date\", handleGetMenuByDate);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}